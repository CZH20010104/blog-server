name: Docker CI/CD

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    steps:
    - uses: actions/checkout@v4
    
    - name: 使用 Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: 安装依赖
      run: npm ci
    
    - name: 缓存依赖
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
    
    - name: 运行测试
      run: npm test
      env:
        CI: true

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: 设置 QEMU
      uses: docker/setup-qemu-action@v3
      
    - name: 设置 Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 登录到 Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: 检查并创建 Docker Hub 仓库
      run: |
        # 检查仓库是否存在
        STATUS=$(curl -s -o /dev/null -w "%{http_code}" \
          https://hub.docker.com/v2/repositories/${{ secrets.DOCKER_USERNAME }}/blog-server)
        
        # 如果仓库不存在 (404)，则创建
        if [ $STATUS -eq 404 ]; then
          echo "仓库不存在，正在创建..."
          curl -X POST \
            https://hub.docker.com/v2/repositories/ \
            -H "Authorization: Bearer ${{ secrets.DOCKER_PASSWORD }}" \
            -H "Content-Type: application/json" \
            -d '{
              "namespace": "${{ secrets.DOCKER_USERNAME }}",
              "name": "blog-server",
              "description": "博客服务端",
              "is_private": false
            }'
        else
          echo "仓库已存在，跳过创建步骤"
        fi
        
    - name: 构建并推送
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/blog-server:latest
          ${{ secrets.DOCKER_USERNAME }}/blog-server:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: 部署到服务器
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        script: |
          # 确保目录存在
          mkdir -p /www/wwwroot/blog-server
          cd /www/wwwroot/blog-server
          
          # 设置环境变量
          cat > .env << EOL
          TAG=${{ github.sha }}
          NODE_ENV=production
          PORT=8000
          DOCKER_IMAGE=${{ secrets.DOCKER_USERNAME }}/blog-server
          EOL
          
          # 创建 docker-compose.yml
          cat > docker-compose.yml << EOL
          services:
            app:
              image: ${{ secrets.DOCKER_USERNAME }}/blog-server:${TAG}
              restart: always
              ports:
                - "${PORT}:${PORT}"
              environment:
                - NODE_ENV=${NODE_ENV}
                - PORT=${PORT}
              healthcheck:
                test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:${PORT}/"]
                interval: 30s
                timeout: 10s
                retries: 3
          EOL
          
          # 导出环境变量供 docker-compose 使用
          export $(cat .env | xargs)
          
          # 拉取最新镜像并重启服务
          docker-compose pull
          docker-compose up -d --force-recreate
          
          # 等待服务启动
          sleep 10
          
          # 检查服务状态
          if ! docker-compose ps | grep -q "Up"; then
            echo "服务启动失败"
            docker-compose logs
            exit 1
          fi
          
          # 清理旧镜像
          docker system prune -f 