name: Docker CI/CD

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

jobs:

  build-and-push:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: 设置 QEMU
      uses: docker/setup-qemu-action@v3
      
    - name: 设置 Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 登录到 Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: 检查并创建 Docker Hub 仓库
      run: |
        # 检查仓库是否存在
        STATUS=$(curl -s -o /dev/null -w "%{http_code}" \
          https://hub.docker.com/v2/repositories/${{ secrets.DOCKER_USERNAME }}/blog-server)
        
        # 如果仓库不存在 (404)，则创建
        if [ $STATUS -eq 404 ]; then
          echo "仓库不存在，正在创建..."
          curl -X POST \
            https://hub.docker.com/v2/repositories/ \
            -H "Authorization: Bearer ${{ secrets.DOCKER_PASSWORD }}" \
            -H "Content-Type: application/json" \
            -d '{
              "namespace": "${{ secrets.DOCKER_USERNAME }}",
              "name": "blog-server",
              "description": "博客服务端",
              "is_private": false
            }'
        else
          echo "仓库已存在，跳过创建步骤"
        fi
        
    - name: 构建并推送
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/blog-server:latest
          ${{ secrets.DOCKER_USERNAME }}/blog-server:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: 部署到服务器
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        script: |
          mkdir -p /www/wwwroot/blog-server
          cd /www/wwwroot/blog-server
          
          cat > .env << EOL
          TAG=${{ github.sha }}
          NODE_ENV=production
          PORT=8000
          DOCKER_IMAGE=${{ secrets.DOCKER_USERNAME }}/blog-server
          # 添加数据库配置
          DB_HOST=mysql
          DB_PORT=3306
          DB_USER=${{ secrets.DB_USER }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          DB_NAME=${{ secrets.DB_NAME }}
          EOL
          
          cat > docker-compose.yml << 'EOL'
          services:
            app:
              image: ${DOCKER_IMAGE}:${TAG}
              restart: always
              ports:
                - ${PORT}:${PORT}
              environment:
                - NODE_ENV=${NODE_ENV}
                - PORT=${PORT}
                - DB_HOST=${DB_HOST}
                - DB_PORT=${DB_PORT}
                - DB_USER=${DB_USER}
                - DB_PASSWORD=${DB_PASSWORD}
                - DB_NAME=${DB_NAME}
              depends_on:
                mysql:
                  condition: service_healthy
              healthcheck:
                test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:${PORT}/"]
                interval: 30s
                timeout: 10s
                retries: 3

            mysql:
              image: mysql:8
              restart: always
              environment:
                - MYSQL_ROOT_PASSWORD=${DB_PASSWORD}
                - MYSQL_DATABASE=${DB_NAME}
                - MYSQL_USER=${DB_USER}
                - MYSQL_PASSWORD=${DB_PASSWORD}
              volumes:
                - mysql_data:/var/lib/mysql
              healthcheck:
                test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${DB_PASSWORD}"]
                interval: 10s
                timeout: 5s
                retries: 5

          volumes:
            mysql_data:
          EOL
          
          export $(cat .env | xargs)
          docker-compose pull
          docker-compose up -d --force-recreate
          
          sleep 10
          
          if ! docker-compose ps | grep -q "Up"; then
            echo "服务启动失败"
            docker-compose logs
            exit 1
          fi
          
          docker system prune -f 